#
# Copyright (c) nVidia Corporation
#

MODULE = nvnet.o

INTERFACE_NAME = nvenetif.o
INTERFACE_OBJS = nvenet.o
CORE_OBJ = nvenetlib.o

MCPINCLUDE = basetype.h os.h nvenet.h adapter.h

# Add the Driver version which got defined from build script.

NVVERSION ?=9999

DEFINES=-D__KERNEL__ -DMODULE -DLINUX -DDRIVERVER=\"$(NVVERSION)\" \
        -DEXPORT_SYMTAB -DCONFIG_PM \

# Baseline CFLAGS, INCLUDE path

CFLAGS = -Wall -Wstrict-prototypes -Wno-trigraphs -O2 -fno-strict-aliasing \
        -fno-common -fomit-frame-pointer

INCLUDES=-I.

TARGET_CPU ?= $(shell uname -m)
TARGET_KERNEL ?= $(shell uname -r)

# SYSINCLUDE can be specified to point at a set of kernel headers/sources

ifndef SYSSRC
    ifdef SYSINCLUDE
        KERNEL_HEADERS := $(SYSINCLUDE)
        KERNEL_SOURCES := $(KERNEL_HEADERS)/..
  else
    KERNEL_SOURCES := /lib/modules/$(shell uname -r)/build
    KERNEL_HEADERS := $(KERNEL_SOURCES)/include
  endif
else
    KERNEL_SOURCES := $(SYSSRC)
    KERNEL_HEADERS := $(KERNEL_SOURCES)/include
endif

ifndef SYSOUT
  KERNEL_OUTPUT := $(KERNEL_SOURCES)
else
  #
  # Support separate KBUILD output directories; SYSOUT
  # needs to reflect the correct KBUILD_OUTPUT.
  #
  KERNEL_OUTPUT := $(SYSOUT)
endif

# Figure out how many args remap_page_ranges() wants

REMAP_PAGE_RANGE := $(shell sh ./conftest.sh "$(CC)" "$(KERNEL_SOURCES)" "$(KERNEL_OUTPUT)" remap_page_range)

ifeq ($(REMAP_PAGE_RANGE),5)
DEFINES += -DREMAP_NEW
endif

# allow build parameters to be passed in through the environment
ifdef BUILD_PARAMS
DEFINES+=$(BUILD_PARAMS)
endif

# determine target architecture if not set

ifeq "$(TARGETARCH)" ""
ifeq (x86_64,$(findstring x86_64,$(shell $(CC) -dumpmachine)))
export TARGETARCH=AMD64
endif
endif

ifeq "$(TARGETARCH)" "AMD64"
CFLAGS += $(ARCHDEFS) -I$(KERNEL_HEADERS)  -Wno-trigraphs -Wno-missing-braces \
          -Wno-sign-compare -O2  -fno-common -fomit-frame-pointer \
          -mno-red-zone -mcmodel=kernel -pipe -fno-reorder-blocks \
          -finline-limit=2000 -fno-strength-reduce $(ALIGN)
          -DKBUILD_BASENAME=nvnet
else
CFLAGS += $(ARCHDEFS) -I$(KERNEL_HEADERS) -O -mpreferred-stack-boundary=2\
        -march=$(TARGET_CPU) $(ALIGN) $(INCL_FILES) 
endif

CFLAGS += $(DEFINES) $(INCLUDES)

# Modversion settings

CFLAGS += $(if $(wildcard $(KERNEL_HEADERS)/linux/modversions.h), \
            -DMODVERSIONS -include $(KERNEL_HEADERS)/linux/modversions.h)

module: gcc-sanity-check $(MODULE)

$(MODULE): $(INTERFACE_NAME) $(CORE_OBJ)
	$(LD) -r -o $@ $^ 

$(INTERFACE_NAME): $(INTERFACE_OBJS)
	$(LD) -r -o $@ $^ 

$(INTERFACE_OBJS): $(MCPINCLUDE)

# Module installation directory

INSTALL_DIR = /lib/modules/$(TARGET_KERNEL)/kernel/drivers/net

# Do fake install if not root (needed for building rpms)
install:
ifeq	($(wildcard $(MODULE)), $(MODULE))
	mkdir -p $(INSTROOT)/$(INSTALL_DIR)
	mkdir -p $(INSTROOT)/usr/include
ifeq  "$(UID)" "0"
	install -b -m 755 -o root $(MODULE) $(INSTROOT)/$(INSTALL_DIR)
	/sbin/depmod -a
else
	install -b -m 755 $(MODULE) $(INSTROOT)/$(INSTALL_DIR)
endif # uid is root
endif # module

# Print name of the module file - required by installer

print-module-filename:
	@echo $(MODULE)

gcc-sanity-check:
	@if ! sh conftest.sh $(CC) $(KERNEL_SOURCES) $(KERNEL_OUTPUT) cc_sanity_check full_output ; then exit 1; fi

uninstall:
	@if [ -f $(INSTALL_DIR)/$(TARGET) ]; then \
		rm -f $(INSTALL_DIR)/$(TARGET); \
		/sbin/depmod -a ; \
	fi;

clean:
	rm -f $(INTERFACE_OBJS) $(INTERFACE_NAME) $(MODULE) *~ core
