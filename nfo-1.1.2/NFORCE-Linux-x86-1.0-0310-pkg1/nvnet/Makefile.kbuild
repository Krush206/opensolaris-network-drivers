#
# Copyright (c) nVidia Corporation
#
# Makefile to build nForce main driver with kbuild
#

MODULE_NAME = nvnet
MODULE = $(MODULE_NAME).ko

NET_CORE_OBJ := nvenetlib.o
NET_GLUE_OBJ := nvenet.o

$(MODULE_NAME)-objs := 	$(NET_CORE_OBJ) $(NET_GLUE_OBJ)

KERNEL_GLUE_NAME :=  nvenetif.o
KERNEL_GLUE_OBJS :=  $(NET_GLUE_OBJ) $(MODULE_NAME).mod.o


src ?= .
obj ?= .

obj-m := $(MODULE_NAME).o

EXTRA_CFLAGS += -I$(src)
EXTRA_CFLAGS += -Wall -Wimplicit -Wreturn-type -Wswitch -Wformat -Wchar-subscripts -Wparentheses -Wpointer-arith  -Wno-multichar  -Werror -O -MD $(DEFINES) $(INCLUDES) -Wno-cast-qual -Wno-error 

ifdef SYSSRC
  KERNEL_SOURCES := $(SYSSRC)
  KERNEL_HEADERS := $(KERNEL_SOURCES)/include
  MODULE_ROOT    := /lib/modules/$(shell sh $(src)/conftest.sh $(CC) $(SYSSRC) $(SYSOUT) get_uname)/kernel/drivers/net
else
  KERNEL_SOURCES := /lib/modules/$(shell uname -r)/build
  KERNEL_HEADERS := $(KERNEL_SOURCES)/include
  MODULE_ROOT    := /lib/modules/$(shell uname -r)/kernel/drivers/net
endif

ifndef SYSOUT
  KERNEL_OUTPUT := $(KERNEL_SOURCES)
  KBUILD_PARAMS :=
else
  KERNEL_OUTPUT := $(SYSOUT)
  KBUILD_PARAMS := KBUILD_OUTPUT=$(KERNEL_OUTPUT)
endif

#
# NVIDIA binary object file includes .common section.
#

EXTRA_LDFLAGS := -d

# Add the Driver version which got defined from build script.
NVVERSION ?=9999
CFLAGS  += -DDRIVERVER=\"$(NVVERSION)\"

# Figure out how many args remap_page_ranges() wants

REMAP_PAGE_RANGE := $(shell sh $(src)/conftest.sh "$(CC)" "$(KERNEL_SOURCES)" "$(KERNEL_OUTPUT)" remap_page_range)

ifeq ($(REMAP_PAGE_RANGE),5)
EXTRA_CFLAGS += -DREMAP_NEW
endif

#
# KBUILD build parameters.
#

KBUILD_PARAMS += -C $(KERNEL_SOURCES) SUBDIRS=$(PWD) KBUILD_VERBOSE=1

module: gcc-sanity-check
	@make CC=$(CC) $(KBUILD_PARAMS) modules; \
	if ! [ -f $(MODULE_OBJECT) ]; then \
	  echo "$(MODULE_OBJECT) failed to build!"; \
	  exit 1; \
	fi

$(KERNEL_GLUE_NAME): module
	$(LD) $(EXTRA_LDFLAGS) -r -o $(KERNEL_GLUE_NAME) $(KERNEL_GLUE_OBJS)

$(obj)/$(NET_CORE_OBJ):
	cp $(src)/$(NET_CORE_OBJ) $(obj)/$(NET_CORE_OBJ)

gcc-sanity-check:
	@if ! sh $(src)/conftest.sh "$(CC)" "$(KERNEL_SOURCES)" "$(KERNEL_OUTPUT)" cc_sanity_check full_output $(CC); then exit 1; fi

# Installation
TARGET_KERNEL ?= $(shell uname -r)

TARGETDIR = /lib/modules/$(TARGET_KERNEL)/kernel/drivers/net


# Do fake install if not root (needed for building rpms)
install:
ifeq	($(wildcard $(MODULE)), $(MODULE))
	mkdir -p $(INSTROOT)/$(TARGETDIR)
ifeq  "$(UID)" "0"
	install -b -m 755 -o root $(MODULE) $(INSTROOT)/$(TARGETDIR)
	/sbin/depmod -a
else
	install -b -m 755 $(MODULE) $(INSTROOT)/$(TARGETDIR)
endif # uid is root
endif # module

uninstall:
	rm -f $(TARGETDIR)/$(MODULE)
	/sbin/depmod -a

clean:
	rm -f *.ko *mod.* *.cmd $(NET_GLUE_OBJ) $(KERNEL_GLUE_NAME) $(MODULE_NAME).o *~ core
